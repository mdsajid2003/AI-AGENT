# 1Ô∏è‚É£ Install dependencies
!pip install -q gradio pandas matplotlib seaborn plotly requests

# 2Ô∏è‚É£ Imports
import gradio as gr
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import tempfile
import os
import requests

# 3Ô∏è‚É£ Set your Groq API Key
groq_api_key = "##############"  # ‚Üê Replace with your Groq API Key
global_df = None

# 4Ô∏è‚É£ Groq AI insight function
def ask_groq_about_data(question):
    global global_df
    if global_df is None:
        return "‚ùå Please upload a dataset first."

    try:
        sample = global_df.head(10).to_csv(index=False)
        prompt = (
            "You are a professional data analyst.\n\n"
            f"Here is a preview of the dataset:\n{sample}\n\n"
            f"Question: {question}\n\nAnswer:"
        )

        headers = {
            "Authorization": f"Bearer {groq_api_key}",
            "Content-Type": "application/json"
        }

        payload = {
            "model": "llama3-70b-8192",
            "messages": [{"role": "user", "content": prompt}],
            "temperature": 0.4
        }

        response = requests.post(
            "https://api.groq.com/openai/v1/chat/completions",
            headers=headers,
            json=payload
        )
        response.raise_for_status()
        return response.json()['choices'][0]['message']['content'].strip()

    except Exception as e:
        return f"‚ö†Ô∏è Error in ask_groq_about_data:\n{type(e).__name__}: {e}"

# 5Ô∏è‚É£ Dataset upload + insight summary + auto plots
def handle_upload(file_path):
    global global_df
    try:
        if file_path.endswith(".csv"):
            df = pd.read_csv(file_path)
        elif file_path.endswith(".tsv"):
            df = pd.read_csv(file_path, sep="\t")
        elif file_path.endswith((".xls", ".xlsx")):
            df = pd.read_excel(file_path)
        elif file_path.endswith(".json"):
            df = pd.read_json(file_path)
        elif file_path.endswith(".parquet"):
            df = pd.read_parquet(file_path)
        else:
            return "‚ùå Unsupported file type", None, None, None
    except Exception as e:
        return f"‚ùå Error loading file: {type(e).__name__}: {e}", None, None, None

    global_df = df
    desc = df.describe(include='all').transpose()

    # Additional stats
    additional_stats = pd.DataFrame()
    for col in df.select_dtypes(include='number').columns:
        median = df[col].median()
        mode = df[col].mode().iloc[0] if not df[col].mode().empty else None
        q1 = df[col].quantile(0.25)
        q3 = df[col].quantile(0.75)
        iqr = q3 - q1
        min_val = df[col].min()
        max_val = df[col].max()
        additional_stats[col] = [median, mode, q1, q3, iqr, min_val, max_val]

    additional_stats.index = ['Median', 'Mode', 'Q1', 'Q3', 'IQR', 'Min', 'Max']
    stats_output = desc.join(additional_stats.transpose(), how='outer').fillna("-")

    preview = df.head().reset_index(drop=True)
    auto_plot = auto_visual_summary()
    return "‚úÖ File uploaded!", preview, stats_output.reset_index(), auto_plot

# 6Ô∏è‚É£ Auto-generate histograms & count plots
def auto_visual_summary():
    global global_df
    fig, axes = plt.subplots(nrows=1, ncols=1, figsize=(10, 6))
    try:
        numeric = global_df.select_dtypes(include='number')
        if not numeric.empty:
            sns.histplot(numeric.iloc[:, 0], kde=True, ax=axes)
            axes.set_title(f"Histogram of {numeric.columns[0]}")
        else:
            cat = global_df.select_dtypes(include='object')
            if not cat.empty:
                sns.countplot(y=cat.iloc[:, 0], ax=axes)
                axes.set_title(f"Count Plot of {cat.columns[0]}")
        tmp = tempfile.NamedTemporaryFile(suffix=".png", delete=False)
        fig.savefig(tmp.name, bbox_inches='tight')
        plt.close(fig)
        return tmp.name
    except Exception as e:
        print("Auto plot error:", e)
        return None

# 7Ô∏è‚É£ Correlation heatmap
def generate_heatmap():
    global global_df
    if global_df is None:
        return None
    try:
        fig, ax = plt.subplots(figsize=(8, 6))
        sns.heatmap(global_df.corr(), annot=True, cmap="coolwarm", fmt=".2f", ax=ax)
        tmp = tempfile.NamedTemporaryFile(suffix=".png", delete=False)
        fig.savefig(tmp.name, bbox_inches='tight')
        plt.close(fig)
        return tmp.name
    except Exception as e:
        print(f"Error generating heatmap: {e}")
        return None

# 8Ô∏è‚É£ Custom plot builder
def plot_custom_chart(plot_type, x_col, y_col):
    global global_df
    if global_df is None:
        return "‚ùå Please upload a dataset first."
    try:
        if plot_type == "Scatter":
            fig = px.scatter(global_df, x=x_col, y=y_col)
        elif plot_type == "Bar":
            fig = px.bar(global_df, x=x_col, y=y_col)
        elif plot_type == "Histogram":
            fig = px.histogram(global_df, x=x_col)
        elif plot_type == "Box":
            fig = px.box(global_df, x=x_col, y=y_col)
        else:
            return "‚ùå Invalid plot type selected."
        return fig
    except Exception as e:
        return f"‚ö†Ô∏è Error creating plot: {type(e).__name__}: {e}"

# 9Ô∏è‚É£ Get columns for dropdowns
def get_column_names():
    global global_df
    return list(global_df.columns) if global_df is not None else []

# üîü Save AI answer to file
def save_answer_to_file(answer_text):
    try:
        with tempfile.NamedTemporaryFile(mode="w+", suffix=".txt", delete=False) as f:
            f.write(answer_text)
            return f.name
    except Exception as e:
        return f"‚ö†Ô∏è Error saving answer: {type(e).__name__}: {e}"

# üîÅ Build Gradio Interface
with gr.Blocks() as demo:
    gr.Markdown("# üß† Groq-Powered AI Data Analysis App")

    with gr.Row():
        file_input = gr.File(label="üìÇ Upload CSV / Excel / JSON / Parquet")
        status = gr.Textbox(label="Status")

    preview = gr.Dataframe(label="üìã Data Preview")
    stats_table = gr.Dataframe(label="üìä Data Insights")
    auto_viz = gr.Image(label="üîç Auto Visual Summary")

    file_input.change(fn=handle_upload, inputs=file_input, outputs=[status, preview, stats_table, auto_viz])

    # Auto-fill column names after upload
    plot_type = gr.Dropdown(["Scatter", "Bar", "Histogram", "Box"], label="Plot Type")
    x_column = gr.Dropdown(label="X-axis Column", choices=[], interactive=True)
    y_column = gr.Dropdown(label="Y-axis Column (Optional)", choices=[], interactive=True)

    def update_columns(file): return get_column_names(), get_column_names()
    file_input.change(fn=update_columns, inputs=file_input, outputs=[x_column, y_column])

    plot_btn = gr.Button("üìä Generate Custom Plot")
    plot_output = gr.Plot(label="Custom Plot")
    plot_btn.click(fn=plot_custom_chart, inputs=[plot_type, x_column, y_column], outputs=plot_output)

    gr.Markdown("## üî• Correlation Heatmap")
    btn_heatmap = gr.Button("Generate Heatmap")
    heatmap_img = gr.Image(label="Heatmap")
    btn_heatmap.click(fn=generate_heatmap, outputs=heatmap_img)

    gr.Markdown("## üí¨ Ask AI Anything About the Data")
    question = gr.Textbox(label="Ask a Question")
    answer = gr.Textbox(label="AI Insight")
    question.submit(fn=ask_groq_about_data, inputs=question, outputs=answer)

    save_btn = gr.Button("üíæ Save AI Answer")
    file_output = gr.File(label="Download")
    save_btn.click(fn=save_answer_to_file, inputs=answer, outputs=file_output)

demo.launch(share=True)
