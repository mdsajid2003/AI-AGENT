# 1Ô∏è‚É£ Install dependencies
!pip install -q gradio pandas matplotlib seaborn plotly requests openai
from google.colab import userdata
userdata.get('OPENROUTER_API_KEY')

# 2Ô∏è‚É£ Imports
import gradio as gr
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import tempfile
import os
import requests
import warnings
from openai import OpenAI

# Suppress warnings from matplotlib
warnings.filterwarnings("ignore", category=UserWarning, module="matplotlib")

# 3Ô∏è‚É£ Set your OpenRouter API Key
# Method 1: Using Colab Secrets (Recommended)
try:
    from google.colab import userdata
    openrouter_api_key = userdata.get('OPENROUTER_API_KEY')
except:
    # Method 2: Direct assignment (replace with your actual key)
    openrouter_api_key = "your-openrouter-api-key-here"  # ‚ö†Ô∏è Replace this with your actual API key
    
# Method 3: Environment variable fallback
if not openrouter_api_key:
    openrouter_api_key = os.getenv("OPENROUTER_API_KEY")

# Initialize OpenRouter client
client = OpenAI(
    base_url="https://openrouter.ai/api/v1",
    api_key=openrouter_api_key,
) if openrouter_api_key else None

global_df = None

# 4Ô∏è‚É£ Test API Key function
def test_api_key():
    """Test if the OpenRouter API key is valid"""
    if not openrouter_api_key:
        return "‚ùå No API key provided"
    
    try:
        test_client = OpenAI(
            base_url="https://openrouter.ai/api/v1",
            api_key=openrouter_api_key,
        )
        response = test_client.chat.completions.create(
            model="mistralai/mistral-small",
            messages=[{"role": "user", "content": "Hello"}],
            max_tokens=5
        )
        return "‚úÖ OpenRouter API key is valid and working!"
    except Exception as e:
        if "invalid_api_key" in str(e) or "401" in str(e):
            return "‚ùå Invalid API key. Please check your OpenRouter key."
        elif "insufficient_quota" in str(e) or "402" in str(e):
            return "‚ö†Ô∏è API key valid but no credits available."
        else:
            return f"‚ùå API Error: {str(e)}"

# 5Ô∏è‚É£ Mistral insight function
def ask_mistral_about_data(question):
    global global_df
    if not openrouter_api_key:
        return "‚ö†Ô∏è **Error**: `OPENROUTER_API_KEY` not set. Please set your OpenRouter API key."
    if global_df is None:
        return "‚ùå Please upload a dataset first."

    try:
        sample = global_df.head(10).to_csv(index=False)
        prompt = (
            "You are a professional data analyst.\n\n"
            f"Here is a preview of the dataset:\n{sample}\n\n"
            f"Question: {question}\n\nAnswer:"
        )

        response = client.chat.completions.create(
            model="mistralai/mistral-small",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.4,
            max_tokens=1500
        )
        
        return response.choices[0].message.content.strip()

    except Exception as e:
        if "insufficient_quota" in str(e) or "402" in str(e):
            return f"‚ö†Ô∏è **API Error**: Insufficient credits. Please check your OpenRouter account."
        elif "invalid_api_key" in str(e) or "401" in str(e):
            return f"‚ö†Ô∏è **API Error**: Invalid API key. Please check your OpenRouter API key."
        elif "rate_limit" in str(e) or "429" in str(e):
            return f"‚ö†Ô∏è **API Error**: Rate limit exceeded. Please try again in a moment."
        else:
            return f"‚ö†Ô∏è **An unexpected error occurred**: {type(e).__name__}: {e}"

# 6Ô∏è‚É£ Dataset upload + insight summary + auto plots
def handle_upload(file_path):
    global global_df
    if file_path is None:
        return "‚è≥ Awaiting file...", None, None, None, [], []

    try:
        file_ext = os.path.splitext(file_path)[1].lower()
        if file_ext == ".csv":
            df = pd.read_csv(file_path)
        elif file_ext == ".tsv":
            df = pd.read_csv(file_path, sep="\t")
        elif file_ext in [".xls", ".xlsx"]:
            df = pd.read_excel(file_path)
        elif file_ext == ".json":
            df = pd.read_json(file_path)
        elif file_ext == ".parquet":
            df = pd.read_parquet(file_path)
        else:
            return f"‚ùå Unsupported file type: {file_ext}", None, None, None, [], []
    except Exception as e:
        return f"‚ùå Error loading file: {type(e).__name__}: {e}", None, None, None, [], []

    global_df = df
    desc = df.describe(include='all').transpose()
    stats_output = desc.fillna("-")
    preview = df.head().reset_index(drop=True)
    auto_plot = auto_visual_summary()
    columns = list(df.columns)

    # Return updates for all relevant components
    return "‚úÖ File uploaded!", preview, stats_output.reset_index(), auto_plot, gr.update(choices=columns), gr.update(choices=columns)

# 7Ô∏è‚É£ Auto-generate histograms & count plots
def auto_visual_summary():
    global global_df
    if global_df is None: return None
    # Prioritize numeric columns for the initial plot
    numeric_cols = global_df.select_dtypes(include='number').columns
    if len(numeric_cols) > 0:
        col_to_plot = numeric_cols[0]
        title = f"Histogram of {col_to_plot}"
        fig = px.histogram(global_df, x=col_to_plot, title=title)
    else: # Fallback to the first categorical column
        object_cols = global_df.select_dtypes(include=['object', 'category']).columns
        if len(object_cols) > 0:
            col_to_plot = object_cols[0]
            title = f"Count Plot of {col_to_plot}"
            fig = px.bar(global_df[col_to_plot].value_counts(), title=title)
        else: # No suitable columns
            return None
    return fig

# 8Ô∏è‚É£ Correlation heatmap
def generate_heatmap():
    global global_df
    if global_df is None:
        return None, "### ‚ùå Error\nPlease upload a dataset first."

    numeric_df = global_df.select_dtypes(include='number')
    if numeric_df.shape[1] < 2:
        return None, "### ‚ö†Ô∏è Warning\nHeatmap requires at least two numeric columns."

    try:
        fig, ax = plt.subplots(figsize=(8, 6))
        sns.heatmap(numeric_df.corr(numeric_only=True), annot=True, cmap="coolwarm", fmt=".2f", ax=ax)
        fig.tight_layout()
        return fig, None # Return figure and no error message
    except Exception as e:
        return None, f"### ‚ùå Error\nCould not generate heatmap: {e}"

# 9Ô∏è‚É£ Custom plot builder
def plot_custom_chart(plot_type, x_col, y_col):
    global global_df
    if global_df is None:
        return None, "### ‚ùå Error\nPlease upload a dataset first."
    if not x_col:
         return None, "### ‚ö†Ô∏è Warning\nPlease select a column for the X-axis."

    try:
        if plot_type == "Scatter":
            if not y_col: return None, "### ‚ö†Ô∏è Warning\nScatter plots require a Y-axis column."
            fig = px.scatter(global_df, x=x_col, y=y_col, title=f"Scatter Plot of {y_col} vs {x_col}")
        elif plot_type == "Bar":
            if not y_col: return None, "### ‚ö†Ô∏è Warning\nBar plots require a Y-axis column."
            fig = px.bar(global_df, x=x_col, y=y_col, title=f"Bar Plot of {y_col} by {x_col}")
        elif plot_type == "Histogram":
            fig = px.histogram(global_df, x=x_col, title=f"Histogram of {x_col}")
        elif plot_type == "Box":
            fig = px.box(global_df, x=x_col, y=y_col, title=f"Box Plot of {y_col or x_col}")
        else:
            return None, "### ‚ùå Error\nInvalid plot type selected."
        return fig, None # Return figure and no error message
    except Exception as e:
        return None, f"### ‚ùå Error\nCould not create plot: {e}"

# üîü Save AI answer to file
def save_answer_to_file(answer_text):
    if not answer_text or answer_text.strip() == "":
        # Let's use Gradio's warning system for feedback
        gr.Warning("Cannot save an empty answer!")
        return None

    try:
        with tempfile.NamedTemporaryFile(mode="w+", suffix=".txt", delete=False, encoding='utf-8') as f:
            f.write(answer_text)
            return f.name
    except Exception as e:
        gr.Error(f"Error saving file: {e}")
        return None

# üîÅ Build Gradio Interface
with gr.Blocks(theme=gr.themes.Soft()) as demo:
    gr.Markdown("# üß† Mistral Small 3.2 24B Powered AI Data Analysis App")
    gr.Markdown("Upload a file, get instant insights, create plots, and ask Mistral anything about your data. **Powered by OpenRouter (Free Tier)**")

    with gr.Tab("üìÅ Data Upload & Overview"):
        with gr.Row():
            file_input = gr.File(label="Upload CSV, Excel, JSON, or Parquet File", file_types=['.csv','.tsv','.xls','.xlsx','.json','.parquet'])
            status = gr.Textbox(label="Status", interactive=False)
        
        preview = gr.Dataframe(label="üìã Data Preview")
        stats_table = gr.Dataframe(label="üìä Descriptive Statistics")
        auto_viz = gr.Plot(label="üîç Auto Visual Summary")

    with gr.Tab("üìà Custom Visualization"):
        with gr.Row():
            with gr.Column(scale=1):
                plot_type = gr.Dropdown(["Scatter", "Bar", "Histogram", "Box"], label="Plot Type", value="Histogram")
                x_column = gr.Dropdown(label="X-axis Column", choices=[], interactive=True)
                y_column = gr.Dropdown(label="Y-axis Column (Optional for some plots)", choices=[], interactive=True)
                plot_btn = gr.Button("üìä Generate Custom Plot", variant="primary")
            with gr.Column(scale=3):
                plot_output = gr.Plot(label="Custom Plot")
                plot_error_msg = gr.Markdown() # For displaying plot errors

    with gr.Tab("üî• Correlation Heatmap"):
        btn_heatmap = gr.Button("Generate Heatmap", variant="primary")
        heatmap_plot = gr.Plot(label="Heatmap") # Changed from Image to Plot for better error/figure handling
        heatmap_error_msg = gr.Markdown()

    with gr.Tab("üîß API Key Test"):
        test_btn = gr.Button("üîç Test OpenRouter API Key", variant="secondary")
        test_result = gr.Markdown()
        gr.Markdown("""
        ### How to get your OpenRouter API Key:
        1. Go to [OpenRouter.ai](https://openrouter.ai/)
        2. Sign up/Login
        3. Go to [Keys](https://openrouter.ai/keys)
        4. Create a new API key
        5. The key should start with `sk-or-v1-`
        """)

    with gr.Tab("üí¨ AI Data Chat"):
        with gr.Row():
            question = gr.Textbox(label="Ask Mistral a Question", placeholder="e.g., What patterns do you see in this data?")
            ask_btn = gr.Button("Submit")
        answer = gr.Markdown(label="Mistral's Insight")
        with gr.Row():
            save_btn = gr.Button("üíæ Save AI Answer")
            file_output = gr.File(label="Download Answer", interactive=False)

    # Event Handlers
    file_input.upload(
        fn=handle_upload,
        inputs=file_input,
        outputs=[status, preview, stats_table, auto_viz, x_column, y_column]
    )

    plot_btn.click(
        fn=plot_custom_chart,
        inputs=[plot_type, x_column, y_column],
        outputs=[plot_output, plot_error_msg]
    )

    btn_heatmap.click(
        fn=generate_heatmap,
        outputs=[heatmap_plot, heatmap_error_msg]
    )

    test_btn.click(
        fn=test_api_key,
        outputs=test_result
    )

    # Allow submitting AI question with Enter key or button click
    question.submit(fn=ask_mistral_about_data, inputs=question, outputs=answer)
    ask_btn.click(fn=ask_mistral_about_data, inputs=question, outputs=answer)

    save_btn.click(fn=save_answer_to_file, inputs=answer, outputs=file_output)

demo.launch(share=True, debug=True)
